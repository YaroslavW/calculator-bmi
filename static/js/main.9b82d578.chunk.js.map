{"version":3,"sources":["Components/Range.js","Components/Output.js","App.js","serviceWorker.js","index.js"],"names":["Range","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","event","onChange","setState","target","react_default","a","createElement","className","type","min","max","step","bind","Component","defaultProps","Output","n","realFeet","feet","Math","floor","round","nearExact","height","toFeet","data","weight","toLbs","bmi","bmiClass","m_height","m_weight","href","App","setBmi","toFixed","getBmiClass","Components_Range","heightChange","weightChange","Components_Output","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b82d578.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Range extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state={\r\n\t\t\tvalue: props.value\r\n\t\t}\r\n\t}\r\n\tstatic defaultProps={\r\n    min: 0,\r\n    max: 245,\r\n    step: 1\r\n  }\r\n\r\n  onChange(event){\r\n  \t// console.log(event.target.value)\r\n  \tthis.props.onChange(this.state.value)\r\n  \tthis.setState({\r\n  \t\tvalue: event.target.value\r\n  \t})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"range\">\r\n      \t<input \r\n\t      \ttype=\"range\"\r\n\t      \tvalue={this.state.value}\r\n\t      \tmin={this.props.min}\r\n\t      \tmax={this.props.max} \r\n\t      \tstep={this.props.step}\r\n\t      \tonChange={this.onChange.bind(this)}\r\n      \t/>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRange.propTypes = {\r\n  min: PropTypes.number.isRequired,\r\n  max: PropTypes.number.isRequired,\r\n  step: PropTypes.number.isRequired\r\n}\r\nexport default Range;","import React, { Component } from 'react';\r\n\r\n\r\nclass Output extends Component {\r\n  toFeet(n){\r\n    let realFeet = ((n*0.393700) / 12);\r\n    let feet = Math.floor(realFeet);\r\n    let inches = Math.round((realFeet - feet) * 12);\r\n    return feet + \"'\" + inches;\r\n  }\r\n\r\n  toLbs(n){\r\n    let nearExact = n/0.45359237;\r\n    let lbs = Math.floor(nearExact);\r\n    return lbs;\r\n  }\r\n\r\n  render() {\r\n    let height = this.toFeet(this.props.data.height);\r\n    let weight = this.toLbs(this.props.data.weight);\r\n    let bmi = this.props.data.bmi;\r\n    let bmiClass = this.props.data.bmiClass;\r\n\r\n    let m_height = this.props.data.height\r\n    let m_weight = this.props.data.weight\r\n\r\n    return (\r\n      <div className=\"output\">\r\n        <h3>{height} Feet</h3>\r\n        <h3>{m_height} Ð¡m</h3>\r\n        <h3>{weight} lbs</h3>\r\n        <h3>{m_weight} Kg</h3>\r\n        <h3>{bmi}</h3>\r\n        <h3 className={(this.props.data.bmiClass === \"Obese\") ? \"danger\" : \"\"}>{bmiClass} {(this.props.data.bmiClass === \"Obese\") ? <a href='http://someproductsite.com'>What Can i Do?</a> : \"\"}</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Output;","import React, { Component } from 'react';\nimport './App.css';\nimport Range from './Components/Range'\nimport Output from './Components/Output'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      height: 170,\n      weight: 65,\n      bmi: 22.49,\n      bmiClass: 'Normal'\n    }\n  }\n\n  heightChange(height){\n    this.setState({\n      height: height\n    }, this.setBmi)\n  }\n\n  weightChange(weight){\n    this.setState({\n      weight: weight\n    }, this.setBmi)\n  }\n\n  setBmi(){\n    let bmi = ((this.state.weight / this.state.height / this.state.height) * 10000).toFixed(2)\n    this.setState({\n      bmi: bmi,\n      bmiClass: this.getBmiClass(bmi)\n    }, \n    // ()=>console.log(this.state)\n    )\n  }\n\n  getBmiClass(bmi){\n    if(bmi < 18.5) return 'Underweight'\n    if(bmi >= 18.5 && bmi <= 24.9) return 'Normal'\n    if(bmi >= 25 && bmi <= 29.9) return 'Overweight'\n    if(bmi >= 30) return 'Obese'\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>BMI-Calculator</h1>\n        <form>\n          <div>\n            <label>Height</label>\n            <Range value={this.state.height} onChange={this.heightChange.bind(this)}/>\n          </div>\n          <div>\n            <label>Weight</label>\n            <Range value={this.state.weight} onChange={this.weightChange.bind(this)}/>\n          </div>\n        </form>\n        <br /><br />\n        <Output data={this.state}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}